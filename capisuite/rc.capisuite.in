#! /bin/bash
# Copyright (c) 1995-2002 SuSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# Author: Kurt Garloff <feedback@suse.de>, Gernot Hillier <gernot@hillier.de>
#
# This file was written for the use with SuSE Linux, but it should
# (hopefully) work for any other LSB compliant distribution. If you need to
# modify it, I'll welcome your feedback. TIA!
#
# /etc/init.d/capisuite
#   and its symbolic link
# /usr/sbin/rccapisuite
#
# system startup script for the CapiSuite daemon
#
# LSB compatible service control script; see http://www.linuxbase.org/spec/
# 
### BEGIN INIT INFO
# Provides:          capisuite 
# Required-Start:    $syslog $remote_fs isdn
# X-UnitedLinux-Should-Start: $time ypbind sendmail
# Required-Stop:     $syslog $remote_fs isdn
# X-UnitedLinux-Should-Stop: $time ypbind sendmail
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: CapiSuite daemon providing ISDN fax and voice services
# Description:       Start CapiSuite to use the default scripts included
#	for the ISDN fax and answering machine. It tests for configured 
#	fax and answering machine users so please modify if you want
#	to use your own scripts!
### END INIT INFO
# 

# Check for missing binaries (stale symlinks should not happen)
CAPISUITE_BIN=@sbindir@/capisuite
test -x $CAPISUITE_BIN || exit 5

# Check for existence of needed config file and read it
CAPISUITE_CONFIG=@pkgsysconfdir@/capisuite.conf
test -r $CAPISUITE_CONFIG || exit 6

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
#      rc_active	checks whether a service is activated by symlinks
#      rc_splash arg    sets the boot splash screen to arg (if active)
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting CapiSuite "
	configured=yes
	# Check if there are configured users for fax or
	# answering machine. Otherwise exit.
	# IMPORTANT: Change this or comment it out if you want to use
	#            your own CapiSuite scripts.
	while read -r sec rest ; do
	        if [ "${sec:0:1}" = "[" -a "$sec" != "[GLOBAL]" ]; then
	                configured_fax=yes
	                break
	        fi
	done < <(cat @pkgsysconfdir@/fax.conf)
	while read -r sec rest ; do
	        if [ "${sec:0:1}" = "[" -a "$sec" != "[GLOBAL]" ]; then
	                configured_voice=yes
	                break
	        fi
	done < <(cat @pkgsysconfdir@/answering_machine.conf)
	test "$configured_fax" -o "$configured_voice" || configured=no
	# end check for configured users

	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.
	if [ $configured = "yes" ]; then
		startproc $CAPISUITE_BIN -d
	else
		rc_failed 6
	fi

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down CapiSuite "
	## Stop daemon with killproc(8) and if this fails
	## killproc sets the return value according to LSB.

	killproc -TERM $CAPISUITE_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart)
	## Do a restart only if the service was active before.
	## Note: try-restart is not (yet) part of LSB (as of 1.2)
	$0 status >/dev/null &&  $0 restart

	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart.

	echo -n "Reload service CapiSuite "
	killproc -HUP $CAPISUITE_BIN
	rc_status -v
	;;
    reload)
	## Like force-reload, but if daemon does not support
	## signaling, do nothing (!)

	echo -n "Reload service CapiSuite "
	killproc -HUP $CAPISUITE_BIN
	rc_status -v
	
	;;
    status)
	echo -n "Checking for service CapiSuite "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
	
	# NOTE: checkproc returns LSB compliant status values.
	checkproc $CAPISUITE_BIN
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
rc_exit
